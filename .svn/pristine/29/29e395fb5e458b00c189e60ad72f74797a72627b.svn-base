#include "PackEthernetFrame.h"
#include "../../../util/util.h"
#include <android/log.h>
//#include <string.h>
const unsigned char ucSourceAddress[6] = {0x00,0x02,0x04,0x06,0x08,0x0a};	//婧愰敓鏂ゆ嫹鍧�CPU閿熸枻鎷峰潃)
const unsigned char ucFrameInterval[12] = { 0 };

//甯ф牎閿熸枻鎷烽敓琛楄鎷稦CS閿熸枻鎷烽敓鏂ゆ嫹32浣岰RC鏍￠敓浠嬨�鏍￠敓鏂ゆ嫹濮嗛敓杞垦嶆嫹閿熸枻鎷烽敓渚ュ尅鎷风墶閿熻鍑ゆ嫹渚勫穽閿熺殕杈炬嫹閿熻鍑ゆ嫹渚勫穽閿熸枻鎷烽敓鏂ゆ嫹閿熸枻鎷蜂緞宸嶉敓绲僉C閿熸枻鎷烽敓鏂ゆ嫹渚勫穽閿燂拷
//閿熻妭鏂ゆ嫹閿熺Ц绔枻鎷烽敓鏂ゆ嫹鏍￠敓浠嬶紝閿熸枻鎷烽敓鏂ゆ嫹鎵ч敓鏂ゆ嫹閿熻鈽呮嫹閿熸枻鎷烽敓鏂ゆ嫹閿熸枻鎷烽敓锟�
//32浣岰RC鏍￠敓鏂ゆ嫹
static unsigned int crc_table[256];


/*
**閿熸枻鎷峰閿熸枻鎷穋rc閿熸枻鎷�閿熸枻鎷烽敓锟�浣嶉敓鏂ゆ嫹灏忛敓鏂ゆ嫹crc閿熸枻鎷�
**涔熼敓鏂ゆ嫹閿熸枻鎷风洿閿熸帴璁规嫹閿熸枻鎷烽敓绲歳c閿熸枻鎷�鐩撮敓鎺ヨ鎷烽敓锟�
**閿熸枻鎷烽敓鏉扮櫢鎷烽敓鏂ゆ嫹256閿熸枻鎷�閿熸枻鎷烽敓鏂ゆ嫹閿熸浼欐嫹,閿熸枻鎷烽敓鏂ゆ嫹鍌昏皨鍐夋垙閿熸枻鎷烽敓锟�
*/
/*
static void init_crc_table(void)
{
	unsigned int c;
	unsigned int i, j;

	for (i = 0; i < 256; i++) {
		c = (unsigned int)i;
		for (j = 0; j < 8; j++) {
			if (c & 1)
				c = 0xedb88320L ^ (c >> 1);
			else
				c = c >> 1;
		}
		crc_table[i] = c;
	}
}
*/
/*閿熸枻鎷烽敓鏂ゆ嫹buffer閿熸枻鎷穋rc鏍￠敓鏂ゆ嫹閿熸枻鎷�*/
static unsigned int crc32(unsigned int crc,unsigned char *buffer, unsigned int size)
{
	unsigned int i;
	for (i = 0; i < size; i++) {
		crc = crc_table[(crc ^ buffer[i]) & 0xff] ^ (crc >> 8);
	}
	return crc ;
}

void init_crc_table(void)
{
	uint32_t crc_data;
	uint32_t crc_crc;
	int    i, j;

	for( i = 0; i < 256; i++) {
		crc_data = i;
		crc_crc = 0;
		for( j = 0; j < 8; j++) {
			if( (crc_data ^ (crc_crc>>24)) & 0x80)
				crc_crc = (crc_crc << 1) ^ 0x04c11db7U;
			else
				crc_crc <<= 1;
		crc_data <<= 1;
		}
		crc_table[i] = crc_crc;
	}
}

static unsigned int crc32(unsigned char * data, unsigned int length)
{
	uint32_t crc_residue = 0xffffffff;
	int i;
	uint32_t crc_std_residue = 0xc704dd7b;
	for(i=0; i<length; i++)
		crc_residue = (crc_residue << 8) ^ crc_table[data[i] ^ crc_residue>>24];

	return crc_residue ^ 0xffffffff;
}

CPackEthernetFrame::CPackEthernetFrame(void)
{
	init_crc_table();
}

CPackEthernetFrame::~CPackEthernetFrame(void)
{
}
//閫氶敓鏂ゆ嫹閿熸枻鎷疯嵔閿熸枻鎷峰箷閿熸枻鎷峰紡閿熸枻鎷穎ramedatafield == null鏃堕敓鏂ゆ嫹閿熸枻鎷烽敓杞匡拷閿熸枻鎷烽敓鏂ゆ嫹閿熸枻鎷�int - 閿熸枻鎷烽敓锟�
int CPackEthernetFrame::PackDataBase(unsigned char * ucDestAddress,	//鐩敓渚ョ鎷峰潃
						FrameDataField * sFrameDataField,//閿熸枻鎷烽敓锟�
						unsigned char * ucSendData)		//閿熸枻鎷烽敓鏂ゆ嫹閿熸枻鎷烽敓鏂ゆ嫹
{

	//鐩敓渚ョ鎷峰潃
		memcpy(ucSendData,ucDestAddress,6);
		//婧愰敓鏂ゆ嫹鍧�
		memcpy(ucSendData + 6,ucSourceAddress,6);
		//閿熸枻鎷烽敓楗猴綇鎷峰抚閿熸枻鎷�
		int nFrameLength = 0;
		if(sFrameDataField->bMulticast)
		{
			if(sFrameDataField->bRead == false)
			{
				nFrameLength = ((46 - 5) < sFrameDataField->nLength) ? (6 + 6 + 2 + (1 + 2 + 2) + sFrameDataField->nLength + 4) : 64;
			}else{
				nFrameLength = 65;
			}

		}
		else
		{
			if(sFrameDataField->bRead == false)
			{
				nFrameLength = ((46 - 4) < sFrameDataField->nLength) ? (6 + 6 + 2 + (2 + 2) + sFrameDataField->nLength + 4) : 64;
			}else{
				nFrameLength = 64;
			}
		}

		CTool::ExchangeInteger(nFrameLength, ucSendData + 12, 2);
		//閿熸枻鎷烽敓锟�

			//閿熶粙鎾�閿熶粙鎾敓鏂ゆ嫹
			int nlen = 14;
			if(sFrameDataField->bMulticast)
			{
				ucSendData[nlen] = (sFrameDataField->bMulticast ? 0x80:0x00) | sFrameDataField->nMulticastNum;
				nlen ++;
			}

			//閿熸枻鎷烽敓浠嬫挱 搴旈敓鏂ゆ嫹 閿熸枻鎷�鍐�FIFO/REG 閿熸枻鎷峰潃
			int nTemp = (sFrameDataField->bNoMulticast ? 0x80 : 0x00) << 8 |
									(sFrameDataField->bAnswer ? 0x40 : 0x00) << 8 |
									(sFrameDataField->bRead ? 0x20 : 0x00) << 8 |
									(sFrameDataField->bFIFO ? 0x10 : 0x00) << 8 |
									(sFrameDataField->ucAddress[0] & 0x0F) << 8 | sFrameDataField->ucAddress[1];

			CTool::ExchangeInteger(nTemp, ucSendData + nlen, 2);

			nlen += 2;
			//閿熸枻鎷烽敓鏂ゆ嫹
			nTemp = (sFrameDataField->nSerialNumber << 12) |
					(sFrameDataField->nLength);
			CTool::ExchangeInteger(nTemp, ucSendData + nlen, 2);

			if(sFrameDataField->bRead == false)
			{
				nlen += 2;//閿熸枻鎷烽敓锟�
				memcpy(ucSendData + nlen,sFrameDataField->ucData,sFrameDataField->nLength);
			}else{
				nlen += 2;//閿熸枻鎷烽敓锟�
				memcpy(ucSendData + nlen,sFrameDataField->ucData,42);
			}


		//CRC
		nTemp = CreateChecksum(ucSendData,nFrameLength - 4);
		CTool::ExchangeInteger(nTemp, ucSendData + (nFrameLength - 4), 4);

		return nFrameLength;
}

//閿熸枻鎷烽敓鏂ゆ嫹閿熸嵎甯嫹鏍￠敓鏂ゆ嫹閿熻锛岄敓鏂ゆ嫹浣嶉敓鏂ゆ嫹鍓嶉敓鏂ゆ嫹閿熸枻鎷蜂綅閿熻妭鐚存嫹
int CPackEthernetFrame::CreateChecksum(unsigned char* ucSenddata,//閿熸枻鎷烽敓鏂ゆ嫹閿熸枻鎷烽敓锟�
						   int nLen) //閿熸枻鎷锋晥閿熸枻鎷疯帺閿熸枻鎷烽敓锟�/鏍￠敓鏂ゆ嫹閿熸枻鎷�
{
	//return crc32(0,ucSenddata,nLen);
	return crc32(ucSenddata,nLen);
}

//閿熸枻鎷峰簲閿熸枻鎷烽敓锟�
int CPackEthernetFrame::UnPackData(unsigned char *pRcvData, int nLen, FrameDataField &m_sFrameDataField)
{
//	__android_log_print(ANDROID_LOG_ERROR,"ethunpack","begin");
	//鐩敓渚ョ鎷峰潃(CPU閿熸枻鎷峰潃)
	if (memcmp(pRcvData,ucSourceAddress,6) != 0)//zhangjj??
	{
		return ANSWER_ERROR_DEST_ADDRESS;
	}
//	__android_log_print(ANDROID_LOG_ERROR,"ethunpack","hah");
	//婧愰敓鏂ゆ嫹鍧�敓鏂ゆ嫹閿熸枻鎷烽敓鏂ゆ嫹涓篊PU閿熸枻鎷峰潃閿熸枻鎷�
	if (0 == memcmp(pRcvData + 6,ucSourceAddress,6))
	{
		return ANSWER_ERROR_SOUR_ADDRESS;
	}
//	__android_log_print(ANDROID_LOG_ERROR,"ethunpack","hah1");
	//閿熸枻鎷烽敓鏂ゆ嫹閿熻鍑ゆ嫹閿熸枻鎷风‘
	int nDataLengthResult = pRcvData[12] << 8 |
						pRcvData[13];
	if (nDataLengthResult != nLen)
	{
		return ANSWER_ERROR_DATA_LENGTH;
	}

	//CRC鏍￠敓鏂ゆ嫹閿熸枻鎷疯巺閿熸枻鎷锋瑺閿熻緝鍑ゆ嫹
	int nCheckSumResult = pRcvData[nDataLengthResult - 4] << 24 |
							pRcvData[nDataLengthResult - 3] << 16 |
							pRcvData[nDataLengthResult - 2] << 8 |
							pRcvData[nDataLengthResult - 1];
	//__android_log_print(ANDROID_LOG_ERROR,"ethunpackcrc","%d",nCheckSumResult);
	int nCheckSum = CreateChecksum(pRcvData,nDataLengthResult - 4);
	//__android_log_print(ANDROID_LOG_ERROR,"ethunpackcrc","%d",nCheckSum);
	if (nCheckSumResult != nCheckSum)
	{
		return ANSWER_ERROR_CRC;
	}

	//鐩敓渚ョ鎷峰潃
	memset(m_ucDestAddress, 0, 6);
	memcpy(m_ucDestAddress,pRcvData,6);
	//婧愰敓鏂ゆ嫹鍧�
	memset(m_ucSourceAddress, 0, 6);
	memcpy(m_ucSourceAddress,pRcvData + 6,6);
	//閿熸枻鎷烽敓锟�	m_sFrameDataField.reset();
	
		//閿熶粙鎾�
		m_sFrameDataField.bMulticast = (1 == (pRcvData[14] >> 7)) ? true : false;

		int nlen = 14;
		if(m_sFrameDataField.bMulticast)
		{
			//閿熶粙鎾敓鏂ゆ嫹
			m_sFrameDataField.nMulticastNum = pRcvData[nlen] & 0x7F;
			nlen ++;
		}

		//閿熸枻鎷烽敓浠嬫挱
		m_sFrameDataField.bNoMulticast = (1 == (pRcvData[nlen] >> 7)) ? true : false;
		//搴旈敓鏂ゆ嫹
		m_sFrameDataField.bAnswer = (1 == ((pRcvData[nlen] >> 6) & 0x01)) ? true : false;
		//閿熸枻鎷�鍐�
		m_sFrameDataField.bRead = (1 == ((pRcvData[nlen] >> 5) & 0x01)) ? true : false;
		//FIFO/REG
		m_sFrameDataField.bFIFO = (1 == ((pRcvData[nlen] >> 4) & 0x01)) ? true : false;
		//閿熸枻鎷峰潃
		m_sFrameDataField.ucAddress[0] = pRcvData[nlen] & 0x0F;
		m_sFrameDataField.ucAddress[1] = pRcvData[nlen + 1];

		nlen += 2;
		//閿熸枻鎷烽敓鍙尨鎷�
		m_sFrameDataField.nSerialNumber = pRcvData[nlen] >> 4;
		//閿熸枻鎷烽敓鏂ゆ嫹
		m_sFrameDataField.nLength = pRcvData[nlen] << 4 |
									pRcvData[nlen + 1];

		nlen += 2;
		//閿熸枻鎷烽敓锟�		memcpy(m_sFrameDataField.ucData,pRcvData + nlen,m_sFrameDataField.nLength);//zhangjj??
		pRcvData = pRcvData + nlen;
		//for(int j =0 ;j<28;j++)
		//{
		//	__android_log_print(ANDROID_LOG_ERROR,"ethunpack28buf","%d",pRcvData[j]);
		//}
	return 1;
}
//閿熸枻鎷峰簲閿熸枻鎷烽敓鏂ゆ嫹閿熸枻鎷烽敓鏂ゆ嫹閿熸枻鎷�
bool CPackEthernetFrame::UnPackErrorType()
{
	return false;
}
