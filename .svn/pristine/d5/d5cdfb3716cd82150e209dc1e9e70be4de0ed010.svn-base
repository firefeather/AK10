package com.szaoto.ak10;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import android.util.Log;
import com.szaoto.ak10.configuration.CardInformation;
import com.szaoto.ak10.configuration.CardInformationList;
import com.szaoto.ak10.configuration.EdidSet;
import com.szaoto.ak10.datacomm.ChanComm;
import com.szaoto.ak10.datacomm.InterfaceComm;
import com.szaoto.ak10.leddisplay.LedConstructActivity;
import com.szaoto.ak10.sqlitedata.ChannelDB;
import com.szaoto.ak10.sqlitedata.ChnData;
import com.szaoto.ak10.sqlitedata.InterfaceDB;
import com.szaoto.ak10.sqlitedata.IntfData;
import com.szaoto.ak10.util.ByteConvert;
import com.szaoto.ak10.util.LogUtil;
import com.szaoto.ak10.util.UtilFun;

public class SocketCommService   {

    private static final int PORT = 8889;
    public static List<Socket> m_ListSocket = new ArrayList<Socket>();
    private ServerSocket server = null;
    private ExecutorService mExecutorService = null; //thread pool
    
    Thread threadSocketListen = null;  
    boolean  FlagListenSocketStopRequested = false;


    public static List<INetDataChangeObserver> netobservers = 
    		new ArrayList<INetDataChangeObserver>();
    
    
	public SocketCommService() {

		 try {
			server = new ServerSocket(PORT);
			mExecutorService = Executors.newCachedThreadPool();  //create a thread pool
			System.out.println("服务器已启动...");     
	        
		} catch (IOException e) {

			e.printStackTrace();
		}
		
		
	}
	
    public  Socket GetSocketByIp(byte[] IpAddress )
    {
    	for (int i = 0; i < m_ListSocket.size(); i++) {
    		Socket tSocket = m_ListSocket.get(i);
    		InetAddress tAddress = tSocket.getInetAddress();
    		byte[] tAddressIp = tAddress.getAddress();
    		if (tAddressIp[0]==IpAddress[0]
    			&& tAddressIp[1]==IpAddress[1]
    			&& tAddressIp[2]==IpAddress[2]
    			&& tAddressIp[3]==IpAddress[3]) {
				return tSocket;
    		}	 
    	}  
	 
    	return null;
    }
	
	//开启监听相乘
	public void StartSocketListeningThread()
	{
		threadSocketListen = new Thread( new Runnable() {
			@Override
			public void run() {
				 Socket client = null;
				 while(!FlagListenSocketStopRequested) {
					 try {
						 Log.d("SOCKETDEBUG", "等待监听...");
		        		 client = server.accept();
		        		 System.out.println("已经连接..."); 
		                 //把客户端放入客户端集合中
		                 m_ListSocket.add(client);
		                 mExecutorService.execute(new SocketHandlerService(client)); 
			               
					} catch (Exception e) {
						 Thread.currentThread().interrupt(); // re-assert interrupt
					}      
		         }	

				 if (client!=null) { 
					 try {
						 client.close();
					 } catch (IOException e) {
						 e.printStackTrace();
					 }
					 m_ListSocket.remove(client); 
				 }
			}
		});
		
		threadSocketListen.start();
	}
	
	
	public void StopSocketListeningThread()
	{	
	    FlagListenSocketStopRequested = true;
	    
        if ( threadSocketListen != null ) {
        	threadSocketListen.interrupt();
        }
	}


    /**
     * 循环遍历客户端集合，给每个客户端都发送信息。
     */      
     public static  void SendByte2AllConnectedPeer(byte[] byteCmd) {
         int num =m_ListSocket.size();
         for (int index = 0; index < num; index ++)
         {
             Socket mSocket = m_ListSocket.get(index);
             PrintWriter pout = null;
             try
             {
                 pout = new PrintWriter(new BufferedWriter( new OutputStreamWriter(mSocket.getOutputStream())),true);
                 //pout.println(byteCmd);
                 pout.println(Arrays.toString(byteCmd));
             }catch (IOException e)
             {
                 e.printStackTrace();
             }
         }
    }

     
     /**
      * 循环遍历客户端集合，给每个客户端都发送信息。
      */      
     public void SendMsg2AllConnectedPeer(String strCmd) {
      	
          System.out.println(strCmd);
          int num =m_ListSocket.size();
          for (int index = 0; index < num; index ++)
          {
              Socket mSocket = m_ListSocket.get(index);
              PrintWriter pout = null;
              try
              {
                  pout = new PrintWriter(new BufferedWriter( new OutputStreamWriter(mSocket.getOutputStream())),true);
                  pout.println(strCmd);
              }catch (IOException e)
              {
                  e.printStackTrace();
              }
          }
     }
      

      
     public void SendMsg2ConnectedPeer(String strCmd,Socket socket) {  	 
         PrintWriter pout = null;
         try {
             pout = new PrintWriter(new BufferedWriter( new OutputStreamWriter(socket.getOutputStream())),true);
             pout.println(strCmd);
         }catch (IOException e) {
             e.printStackTrace();
         }
     }

	 class SocketHandlerService implements Runnable {
         private Socket socket;
        // private BufferedReader in = null;
         private InputStream inputStream;        
         PrintStream pStream = null;        
         public SocketHandlerService(Socket socket) {	 
             this.socket = socket;
             try 
             {
                  //in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            	 inputStream = socket.getInputStream();
            	 pStream = new PrintStream(socket.getOutputStream());
             }
             catch(IOException e){
            	  e.printStackTrace();
             }
             
             //SendMsg2ConnectedPeer("OK",socket);
                    
         }
         
         public void SendBytes2ConnectedPeer(byte[] byteCmd,Socket socket)  {
             for (int i = 0; i < byteCmd.length; i++) {	
				 pStream.write(byteCmd[i]);
			 }
         }
         

         @Override
         public void run() {
             try {
 	 
                 while(socket!= null && !socket.isClosed()) { 	
                	 byte[] buf = new byte[64];     	 
                	 inputStream.read(buf, 0, 2);
                	 if (buf[0]!='A'||buf[1]!='T') {
						continue;
					 }
  	 
                	 try {
                		 inputStream.read(buf, 2, 12);
					 } catch (Exception e) {
						e.printStackTrace();
						continue;
					 }
 	 
                	// buf = UtilFun.getBytes(chbuf);
                	 //获取mac地址和源地址
                	 byte[] macaddress = UtilFun.CopyOfRange(buf,0,6);
                	 byte[] sourceaddress =UtilFun.CopyOfRange(buf,6,12);
                	 byte[] bytelength =  UtilFun.CopyOfRange(buf,12,14);

                	 //pc源地址          
                	 int length = ByteConvert.byteToUbyte(bytelength[0])*0x100+
                			 ByteConvert.byteToUbyte(bytelength[1]);
                	 
                	 inputStream.read(buf,14,length-14);
              	 
                	 byte[] datas = new byte[length-16]; 
                	 datas = UtilFun.CopyOfRange(buf,14,length-4);        
                	 LogUtil.WriteLog(buf,false);
                	 byte[] tmpByte = new byte[60];
              	 
                	 for (int i = 0; i < tmpByte.length; i++) {
						tmpByte[i] = buf[i];
					 }
                	 
                	 byte[] crc32 = UtilFun.CRC32(tmpByte);
	 
                	 if(crc32[0]!=buf[length-4]||
                		crc32[1]!=buf[length-3]||
                		crc32[2]!=buf[length-2]||
                		crc32[3]!=buf[length-1])
                	 {
                		 continue;
                	 }
 
                	 //调试打印
                	
                     DealWithCmd(macaddress,sourceaddress,datas);                
                 }
                 
                 //如果客户端断开了连接
                 if (socket!=null&&socket.isClosed()) {		
                	 //关闭了socket
                	 m_ListSocket.remove(socket);
                	 socket=null;	 
                 }
                 
                 
             } catch (Exception e) {
                 e.printStackTrace();
             }
         }
         
       //处理命令
       public void DealWithCmd(byte[] macaddress,byte[] source,byte[] datas)
       {
    	   //获取目标
    	   if (macaddress[0]=='A'&&macaddress[1]=='T'&&macaddress[2]==0x0a&&
    			   macaddress[3]=='A'&&macaddress[4]=='P'&&macaddress[5]=='P' ) {
    		   DelWithAK10(source,datas);
		   }
    	   else {
    		   DelWithCard(macaddress,source,datas);
		   }
    	   
       }
       
       public void DelWithAK10(byte[] source,byte[] datas)
       {
    	   int nSubFuncId =ByteConvert.byteToUbyte(datas[0])*0x100+ByteConvert.byteToUbyte(datas[1]);  	  
    	   if (nSubFuncId == 0x0001) {
    	   }
    	   if (nSubFuncId == 0x00ff) {  
    		   int mLedid =ByteConvert.byteToUbyte(datas[2]);
    		   HomePageActivity.ClearLedData(mLedid);
    		   NotifyAll(3);
    	   } 
       }
       
       public void DelWithCard(byte[] macaddress,byte[] source,byte[] datas)
       {
    	   //卡类型
    	   byte type = macaddress[2];
    	   
    	   if (type==0x01) {
    		   DelwithSysCardCmd(macaddress,source,datas);
		   }
    	   else if(type==0x02) {
    		   DelwithAcqCardCmd(macaddress,source,datas);
	 	   }
    	   else if(type==0x03) {
    		   int nRet =  DelwithSndCardCmd(macaddress,source,datas);
    		   if (nRet==-1) {
    			   Log.i("ERROR", "RCVERROR");
    		   }
    	   }
       }
       
       public void DelwithSysCardCmd(byte[] macaddress,byte[] source,byte[] datas)
       {
    	   int nLedid =ByteConvert.byteToUbyte(datas[0]);
    	   int nInterfId = ByteConvert.byteToUbyte(datas[1]);
    	   int nSubFuncId =ByteConvert.byteToUbyte(datas[2])*0x100+ByteConvert.byteToUbyte(datas[3]);
    	   
    	   //设置视频剪切区域
    	   if (nSubFuncId == 0x0001) {
			
       		   short x = (short) (ByteConvert.byteToUbyte(datas[4])*0x100+ByteConvert.byteToUbyte(datas[5]));
    		   short y = (short) (ByteConvert.byteToUbyte(datas[6])*0x100+ByteConvert.byteToUbyte(datas[7]));
    		   short w = (short) (ByteConvert.byteToUbyte(datas[8])*0x100+ByteConvert.byteToUbyte(datas[9]));
    		   short h = (short) (ByteConvert.byteToUbyte(datas[10])*0x100+ByteConvert.byteToUbyte(datas[11]));
    		   
    		   int nFrame = ByteConvert.byteToUbyte(datas[12]);
    		   
    		   //设置区域
    		   int id = ByteConvert.byteToUbyte(macaddress[5])*1000+nInterfId;
    		   
    		   //如果系统卡在数据库中不存在，就添加
    		   if(!ChannelDB.CheckChanExist(id, nLedid)){
    			   LedConstructActivity.AddChanDbData(macaddress, id, x, y, nLedid,1);
    		   }
    		   
    		   ChannelDB.UpdateChannelPosParam(id, x, y, w, h, nLedid);
    		   ChannelDB.UpdateFrame(id, nFrame, nLedid);
    		   
    		   NotifyAll(0);

		   }
    	   
    	 //查询版本
    	   if (nSubFuncId == 0x0003) {   
    		  
    		   byte[] byteRetVersion = new byte[2];
    		   ChanComm.GetAcqCardSoftwareVersion(macaddress,byteRetVersion);
    		  
    		   //数据发回
    		   
    		   byte[] datas2send = new byte[64];
    		   
    		   byte[] datasTmp = new byte[60];
    		   
    		   datasTmp[0]=source[0];
    		   datasTmp[1]=source[1];
    		   datasTmp[2]=source[2];
    		   datasTmp[3]=source[3];
    		   datasTmp[4]=source[4];
    		   datasTmp[5]=source[5];
    		   
    		   datasTmp[6]=macaddress[0];
    		   datasTmp[7]=macaddress[1];
    		   datasTmp[8]=macaddress[2];
    		   datasTmp[9]=macaddress[3];
    		   datasTmp[10]=macaddress[4];
    		   datasTmp[11]=macaddress[5];

    		   
    		   datasTmp[12] = 0x00;
    		   datasTmp[13] = 0x40;
    		   
    		   datasTmp[14] = (byte) 0xff;
    		   datasTmp[15] = (byte) 0xff;
    		   datasTmp[16] = (byte) 0x00;
    		   datasTmp[17] = (byte) 0x03;
    		   datasTmp[18] = byteRetVersion[0];
    		   datasTmp[19] = byteRetVersion[1];
    		   
    		   byte[] crc32 = UtilFun.CRC32(datasTmp);
    		   
    		   
    		   for (int i = 0; i < 60; i++) {
				
    			   datas2send[i] = datasTmp[i];
			   }
    		   
    		   datas2send[60] = crc32[0];
    		   datas2send[61] = crc32[1];
    		   datas2send[62] = crc32[2];
    		   datas2send[63] = crc32[3];
    		   
    		   
    		   byte[] byteIp = new byte[4];
    		   byteIp[0] = source[2];
    		   byteIp[1] = source[3];
    		   byteIp[2] = source[4];
    		   byteIp[3] = source[5];
    		   
    		   Socket socketTmp =  GetSocketByIp(byteIp); 
    		   
    		   SendBytes2ConnectedPeer(datas2send, socketTmp);
   
		   }
    	 	   
       }
       
       public void DelwithAcqCardCmd(byte[] macaddress,byte[] source,byte[] datas)
       {
    	   int nLedid =ByteConvert.byteToUbyte(datas[0]);
    	   int nInterfId = ByteConvert.byteToUbyte(datas[1]);
    	   int nSubFuncId =ByteConvert.byteToUbyte(datas[2])*0x100+ByteConvert.byteToUbyte(datas[3]);
    	   
    	   //检查数据库中这个id的配置是否存在，如果不存在就添加到数据库
    	   
    	   int nChid = macaddress[5]*1000+nInterfId;
    	   
    	   if (nInterfId!=0xff) {
        	   if (!ChannelDB.CheckChanExist(nChid,nLedid))
        	   {
        		  //增加channel
        		  LedConstructActivity.AddChanDbData(macaddress,nChid,0,0,nLedid,0); 		   
        	   }
		   }
 	   
    	   //设置视频剪切区域
    	   if (nSubFuncId == 0x0001) {
			
    		   short x = (short) (ByteConvert.byteToUbyte(datas[4])*0x100+ByteConvert.byteToUbyte(datas[5]));
    		   short y = (short) (ByteConvert.byteToUbyte(datas[6])*0x100+ByteConvert.byteToUbyte(datas[7]));
    		   short w = (short) (ByteConvert.byteToUbyte(datas[8])*0x100+ByteConvert.byteToUbyte(datas[9]));
    		   short h = (short) (ByteConvert.byteToUbyte(datas[10])*0x100+ByteConvert.byteToUbyte(datas[11]));
    		   
    		   int nFrame = ByteConvert.byteToUbyte(datas[12]);
    		   
    		   //设置区域
    		   int id = macaddress[5]*1000+nInterfId;
    		   ChannelDB.UpdateChannelPosParam(id, x, y, w, h, nLedid);
    		   ChannelDB.UpdateFrame(id, nFrame, nLedid);
    		   
    		   //设置分辨率 edid
    			String tempreslution1 = w+"X"+h;
    			EdidSet Editset = new EdidSet(tempreslution1,nFrame);	
    		    Editset.SetResolutionAndFrame(nInterfId,macaddress,1);
 
    		    NotifyAll(1);
		   }
    	   
    	   //查询版本
    	   if (nSubFuncId == 0x0003) {   
    		  
    		   byte[] byteRetVersion = new byte[2];
    		   ChanComm.GetAcqCardSoftwareVersion(macaddress,byteRetVersion);
    		  
    		   //数据发回
    		   
    		   byte[] datas2send = new byte[64];
    		   
    		   byte[] datasTmp = new byte[60];
    		   
    		   datasTmp[0]=source[0];
    		   datasTmp[1]=source[1];
    		   datasTmp[2]=source[2];
    		   datasTmp[3]=source[3];
    		   datasTmp[4]=source[4];
    		   datasTmp[5]=source[5];
    		   
    		   datasTmp[6]=macaddress[0];
    		   datasTmp[7]=macaddress[1];
    		   datasTmp[8]=macaddress[2];
    		   datasTmp[9]=macaddress[3];
    		   datasTmp[10]=macaddress[4];
    		   datasTmp[11]=macaddress[5];

    		   
    		   datasTmp[12] = 0x00;
    		   datasTmp[13] = 0x40;
    		   
    		   datasTmp[14] = (byte) 0xff;
    		   datasTmp[15] = (byte) 0xff;
    		   datasTmp[16] = (byte) 0x00;
    		   datasTmp[17] = (byte) 0x03;
    		   datasTmp[18] = byteRetVersion[0];
    		   datasTmp[19] = byteRetVersion[1];
    		   
    		   byte[] crc32 = UtilFun.CRC32(datasTmp);
    		   
    		   
    		   for (int i = 0; i < 60; i++) {
				
    			   datas2send[i] = datasTmp[i];
			   }
    		   
    		   datas2send[60] = crc32[0];
    		   datas2send[61] = crc32[1];
    		   datas2send[62] = crc32[2];
    		   datas2send[63] = crc32[3];
    		   
    		   
    		   byte[] byteIp = new byte[4];
    		   byteIp[0] = source[2];
    		   byteIp[1] = source[3];
    		   byteIp[2] = source[4];
    		   byteIp[3] = source[5];
    		   
    		   Socket socketTmp =  GetSocketByIp(byteIp); 
    		   
    		   SendBytes2ConnectedPeer(datas2send, socketTmp);
   
		   }
   
       }
       
       protected void NotifyAll(int nType)
       {
			if (null != netobservers && 0 != netobservers.size()) {
				for (int i = 0; i < netobservers.size(); i++) {
					netobservers.get(i).onNetDataChangeNotify(nType);
				}
			}

       }
       
       public int DelwithSndCardCmd(byte[] macaddress,byte[] source,byte[] datas)
       {
    	   int nLedid =ByteConvert.byteToUbyte(datas[0]);
    	   //哪个插槽
    	   int nInterfId = ByteConvert.byteToUbyte(datas[1]);
    	   int nSlotNum  = ByteConvert.byteToUbyte(macaddress[5]);
    	   int nSubFuncId =ByteConvert.byteToUbyte(datas[2])*0x100+ByteConvert.byteToUbyte(datas[3]);
   
    	   //透明转发
    	   if (nSubFuncId == 0xffff) {
			   
    		   int dataLen = ByteConvert.byteToUbyte(datas[4])*0x100+ByteConvert.byteToUbyte(datas[5]);		   
    		   byte[] DataToTransfer = UtilFun.CopyOfRange(datas, 6, 6+dataLen);	
    		   
    		   //分析是否需要回传
    		   boolean bNeedBack = false;
    		   boolean bLongWait = false;
    		   if((DataToTransfer[9]&0x0f)!=0){
    			   bNeedBack = true;
    		   }
    		   
    		   if (DataToTransfer[5]==(byte)0x91) {
    			   bLongWait = true;
			   }
    		   
    		   //直接向卡转发数据，广播
    		   if (nSlotNum==0xff) {	
    			  ArrayList<IntfData> tArrIntfDatas = InterfaceDB.GetAllRecord(1);	  
    			  for (int i = 0; i < tArrIntfDatas.size(); i++) {
    				  IntfData tInterfData = tArrIntfDatas.get(i);
    				  
    				  byte[] tMacAddress = tInterfData.macaddress;
    				  int    nRj45Num =    tInterfData.Id%1000;
    				  InterfaceComm.SendtoScanCard(tMacAddress,nRj45Num, DataToTransfer);
    				  
    				   if (bNeedBack) {				
    	    			   try {
    	    				   
    						  Thread.sleep(100);    						  
    						  //读数据 
    						  byte[] bytesRcv = InterfaceComm.ReadBackFiFoRcvData(tMacAddress,nRj45Num,bLongWait); 
    						  if (bytesRcv==null||bytesRcv.length<28) {
    							 return -1;
    						  }
    						  
    						    try {
    						    	LogUtil.WriteLog(bytesRcv,true);
    							} catch (IOException e) {
    								e.printStackTrace();
    							}
    						  //  String str = String.format("%d", bytesRcv.length);
    						  //Toast.makeText(HomePageActivity.getInstance(), str, Toast.LENGTH_SHORT).show(); 
    						  int nFrameCnt = bytesRcv.length/28;
    						  for (int j = 0; j < nFrameCnt; j++) {
    							
    				    		   byte[] datas2send = new byte[64];	   
    				    		   byte[] datasTmp = new byte[60];
    				    		   
    							   datasTmp[0]=source[0];
    				    		   datasTmp[1]=source[1];
    				    		   datasTmp[2]=source[2];
    				    		   datasTmp[3]=source[3];
    				    		   datasTmp[4]=source[4];
    				    		   datasTmp[5]=source[5];
    				    		   
    				    		   datasTmp[6]=macaddress[0];
    				    		   datasTmp[7]=macaddress[1];
    				    		   datasTmp[8]=macaddress[2];
    				    		   datasTmp[9]=macaddress[3];
    				    		   datasTmp[10]=macaddress[4];
    				    		   datasTmp[11]=macaddress[5];

    				    		   
    				    		   datasTmp[12] = 0x00;
    				    		   datasTmp[13] = 0x40;
    				    		   
    				    		   datasTmp[14] = (byte) 0xff;
    				    		   datasTmp[15] = (byte) nInterfId;
    				    		   datasTmp[16] = (byte) 0xff;
    				    		   datasTmp[17] = (byte) 0xff;
    				    		   
    				    		   datasTmp[18] = (byte) 0x00;
    				    		   datasTmp[19] = (byte) 0x1c;
    				    		   
    				    		   for (int k = 0; k < 28; k++) {	 
    				    			   datasTmp[20+k] = bytesRcv[k+28*j];
    							   }
    				    		   
    				    		   byte[] crc32 = UtilFun.CRC32(datasTmp);
    				    		   
    				    		   for (int k = 0; k < 60; k++) {
    				   				
    				    			   datas2send[k] = datasTmp[k];
    							   }
    				    		   
    				    		   datas2send[60] = crc32[0];
    				    		   datas2send[61] = crc32[1];
    				    		   datas2send[62] = crc32[2];
    				    		   datas2send[63] = crc32[3];
    				    		   
    				    		   
    				    		   byte[] byteIp = new byte[4];
    				    		   byteIp[0] = source[2];
    				    		   byteIp[1] = source[3];
    				    		   byteIp[2] = source[4];
    				    		   byteIp[3] = source[5];
    				    		   
    				    		   Socket socketTmp =  GetSocketByIp(byteIp); 
    				    		   
    				    		   if (!socketTmp.isClosed()) {
    				    			   SendBytes2ConnectedPeer(datas2send, socketTmp);
								   }	     							  
    						  	}    						  
    					    } catch (InterruptedException e) {
    						   e.printStackTrace();
    					    }   	    			   
    				   }    			   				  
    			  	}   
			   	}
    		   	else {
    			   //点播
    			   InterfaceComm.SendtoScanCard(macaddress, nInterfId, DataToTransfer);
    			   
    			   if (bNeedBack) {
        			   try {
        				   
    					  Thread.sleep(200);
    					  //读数据 
    					  byte[] bytesRcv = InterfaceComm.ReadBackFiFoRcvData(macaddress,nInterfId,bLongWait);
    					  
    					  if (bytesRcv==null||bytesRcv.length<28) {
    						 return -1;
    					  }
    					  
    					  int nFrameCnt = bytesRcv.length/28;
    					  
    					  for (int i = 0; i < nFrameCnt; i++) {
    						
    			    		   byte[] datas2send = new byte[64];	   
    			    		   byte[] datasTmp = new byte[60];
    			    		   
    						   datasTmp[0]=source[0];
    			    		   datasTmp[1]=source[1];
    			    		   datasTmp[2]=source[2];
    			    		   datasTmp[3]=source[3];
    			    		   datasTmp[4]=source[4];
    			    		   datasTmp[5]=source[5];
    			    		   
    			    		   datasTmp[6]=macaddress[0];
    			    		   datasTmp[7]=macaddress[1];
    			    		   datasTmp[8]=macaddress[2];
    			    		   datasTmp[9]=macaddress[3];
    			    		   datasTmp[10]=macaddress[4];
    			    		   datasTmp[11]=macaddress[5];

    			    		   
    			    		   datasTmp[12] = 0x00;
    			    		   datasTmp[13] = 0x40;
    			    		   
    			    		   datasTmp[14] = (byte) 0xff;
    			    		   datasTmp[15] = (byte) nInterfId;
    			    		   datasTmp[16] = (byte) 0xff;
    			    		   datasTmp[17] = (byte) 0xff;
    			    		   
    			    		   datasTmp[18] = (byte) 0x00;
    			    		   datasTmp[19] = (byte) 0x1c;
    			    		   
    			    		   for (int j = 0; j < 28; j++) {	 
    			    			   datasTmp[20+j] = bytesRcv[j+28*i];
    						   }
    			    		   
    			    		   byte[] crc32 = UtilFun.CRC32(datasTmp);
    			    		   
    			    		   for (int k = 0; k < 60; k++) {
    			   				
    			    			   datas2send[k] = datasTmp[k];
    						   }
    			    		   
    			    		   datas2send[60] = crc32[0];
    			    		   datas2send[61] = crc32[1];
    			    		   datas2send[62] = crc32[2];
    			    		   datas2send[63] = crc32[3];
    			    		   
    			    		   
    			    		   byte[] byteIp = new byte[4];
    			    		   byteIp[0] = source[2];
    			    		   byteIp[1] = source[3];
    			    		   byteIp[2] = source[4];
    			    		   byteIp[3] = source[5];
    			    		   
    			    		   Socket socketTmp =  GetSocketByIp(byteIp); 
    			    		   
    			    		   SendBytes2ConnectedPeer(datas2send, socketTmp);
    						  
    					  }
    					  
    				    } catch (InterruptedException e) {
    					   e.printStackTrace();
    				    }
        			   
    			   }
    			   
    			   
			   }
    		  
    		   
    		
    		   
		   }
    	   
    	   //设置视频口
    	   if (nSubFuncId == 0x0002) {
			
    		   //获取视频通道号
    		   int tChanId = ByteConvert.byteToUbyte(datas[4])*1000+ByteConvert.byteToUbyte(datas[5]);  
    		   
    		   if (tChanId==0) {
				  return -1;
			   }
    		   
    		   if (!ChannelDB.CheckChanExist(tChanId, nLedid)) {
    			   
    			   
    			    //获取采集卡的MAC地址
    			    CardInformationList.GetCardInformationList();
    				
    				final CardInformation[] tCardInformations = CardInformationList.GetCardInformations();	
    				
    				int CardIndex = ByteConvert.byteToUbyte(datas[4])-1;
    				
    				byte[] MacAddress = tCardInformations[CardIndex].getUcMACAddress();
    			   
    			    if (MacAddress[2]==1) {
    			    	LedConstructActivity.AddChanDbData(MacAddress, tChanId, 0, 0, nLedid, 1);
					}else {
						LedConstructActivity.AddChanDbData(MacAddress, tChanId, 0, 0, nLedid, 0);
					}
    			    
			   }
    		   
    		   int chPort = tChanId/1000+tChanId%1000;
    		   InterfaceComm.SetSendCardChPortAndEnable(true, chPort, macaddress, nInterfId);
    		   
    		   int tIntfId = ByteConvert.byteToUbyte(macaddress[5])*1000+nInterfId;
    		   if (!InterfaceDB.CheckInterfaceExist(tIntfId, nLedid)) {
   				
    			   //获取channel的x，y
    			   ChnData tChnData =  ChannelDB.GetRecordById(tChanId, nLedid);
    			   
    			   LedConstructActivity.AddInterfDbData(tIntfId, tChanId, nLedid, macaddress, 
    					   tChnData.offsetX, tChnData.offsetY, 400, 400);
    			   
			   }
    		   else {
    			   InterfaceDB.UpdateChannelId(tIntfId, tChanId, nLedid);
			   }
    		   NotifyAll(2);
		   }
    	   
    	   //设置视频剪切区域
    	   if (nSubFuncId == 0x0001) {
			
    		   short x = (short) (ByteConvert.byteToUbyte(datas[4])*0x100+ByteConvert.byteToUbyte(datas[5]));
    		   short y = (short) (ByteConvert.byteToUbyte(datas[6])*0x100+ByteConvert.byteToUbyte(datas[7]));
    		   short w = (short) (ByteConvert.byteToUbyte(datas[8])*0x100+ByteConvert.byteToUbyte(datas[9]));
    		   short h = (short) (ByteConvert.byteToUbyte(datas[10])*0x100+ByteConvert.byteToUbyte(datas[11]));
    		   short cfg3d = (short) (ByteConvert.byteToUbyte(datas[19]));
    		   
    		   InterfaceComm.SetSendCardPortParam(x, y, w, h, cfg3d, macaddress, nInterfId);
    		   int tIntfId = ByteConvert.byteToUbyte(macaddress[5])*1000+nInterfId;
    		   
    		   
    		   IntfData tintfData = InterfaceDB.GetRecordById(tIntfId, nLedid);
    		   ChnData tChnData =  ChannelDB.GetRecordById(tintfData.channelid, nLedid);
    		   
    		   InterfaceDB.UpdateInterfacePosParam(tIntfId, x+tChnData.offsetX, y+tChnData.offsetY, w, h, cfg3d, nLedid);
    		   
    		   NotifyAll(2);
		   }
    	   
    	   //查询版本
    	   if (nSubFuncId == 0x0003) {   
    		  
    		   byte[] byteRetVersion = new byte[2];
    		   InterfaceComm.GetSndCardByteSoftwareVersion(macaddress,byteRetVersion);
    		  
    		   //数据发回
    		   
    		   byte[] datas2send = new byte[64];
    		   
    		   byte[] datasTmp = new byte[60];
    		   
    		   datasTmp[0]=source[0];
    		   datasTmp[1]=source[1];
    		   datasTmp[2]=source[2];
    		   datasTmp[3]=source[3];
    		   datasTmp[4]=source[4];
    		   datasTmp[5]=source[5];
    		   
    		   datasTmp[6]=macaddress[0];
    		   datasTmp[7]=macaddress[1];
    		   datasTmp[8]=macaddress[2];
    		   datasTmp[9]=macaddress[3];
    		   datasTmp[10]=macaddress[4];
    		   datasTmp[11]=macaddress[5];

    		   
    		   datasTmp[12] = 0x00;
    		   datasTmp[13] = 0x40;
    		   
    		   datasTmp[14] = (byte) 0xff;
    		   datasTmp[15] = (byte) 0xff;
    		   datasTmp[16] = (byte) 0x00;
    		   datasTmp[17] = (byte) 0x03;
    		   datasTmp[18] = byteRetVersion[0];
    		   datasTmp[19] = byteRetVersion[1];
    		   
    		   byte[] crc32 = UtilFun.CRC32(datasTmp);
    		   
    		   
    		   for (int i = 0; i < 60; i++) {
				
    			   datas2send[i] = datasTmp[i];
			   }
    		   
    		   datas2send[60] = crc32[0];
    		   datas2send[61] = crc32[1];
    		   datas2send[62] = crc32[2];
    		   datas2send[63] = crc32[3];
    		   
    		   
    		   byte[] byteIp = new byte[4];
    		   byteIp[0] = source[2];
    		   byteIp[1] = source[3];
    		   byteIp[2] = source[4];
    		   byteIp[3] = source[5];
    		   
    		   Socket socketTmp =  GetSocketByIp(byteIp); 
    		   
			 //   String str = String.format("%d", datas2send.length);
			 // Toast.makeText(HomePageActivity.getInstance(), str, Toast.LENGTH_SHORT).show(); 

    		   SendBytes2ConnectedPeer(datas2send, socketTmp);
   
		   }
    	   
    	   return 0;
       }
                        
    
        
     }

 
	
	
	
	
	

}
