package com.szaoto.ak10.player;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

import com.szaoto.ak10.HomePageActivity;
import com.szaoto.ak10.IInfoChangeObserver;
import com.szaoto.ak10.R;
import com.szaoto.ak10.R.id;
import com.szaoto.ak10.adapter.FileAdapter;
import com.szaoto.ak10.custom1.MediaFileFilter;
import com.szaoto.ak10.entity.VideoFile;
import com.szaoto.ak10.util.TraverseDictionary;
import com.szaoto.ak10.util.UsbStatesReceiver;
import com.szaoto.ak10.util.XmlTool;

/*
 * 类名:添加视频图片文件类
 * 功能：点击添加，进入sdcard目录，选择文件，添加到播放列表
 * 作者:zhangsj
 * 创建日期：2014-05-08
 */
public class AddPlayList extends Activity implements IInfoChangeObserver{
	public MyHandler mhandler;
	public UsbStatesReceiver usbstates;
	TextView Usb;
	public  String Usb_PATH ; 
	private Button btn_save_list;
	private ListView lv_add_list;
	private TextView tvpath;
	private Button btn_back_list;
	// 记录当前的父文件夹
	File currentParent;
	// 记录当前路径下的所有文件夹的文件数组
	File[] currentFiles;
	private Button btn_SelectAll;

	/**
	 * 根据 选中参数 ，进行 全选 或 取消全选
	 * 
	 * true(全选),false(反选)
	 * 
	 * @param checked
	 */
	private void SelectAllItem(boolean checked) {

		// 清空 内存 HomePageActivity.VideoFileList_Added
		HomePageActivity.VideoFileList_Added.clear();
		if (checked == true) {

			// 判断 如果 是全选，则 添加
			VideoFile videoFile;

			// 对 当前 文件 进行文件过滤，判断 文件 是否 是 视频文件 或 图片文件
			for (File file : currentFiles) {

				// 如果 是视频文件 或 图片文件 ，则 添加 到 内存 HomePageActivity.VideoFileList_Added
				// 中
				if (MediaFileFilter.isVideoFile(file)
						|| MediaFileFilter.isImageFile(file)) {

					videoFile = new VideoFile();

					videoFile.setId("");
					// 获取时长
					videoFile.setDuration("10");
					videoFile.setFileName(file.getName());
					videoFile.setFilePath(file.getPath());
					videoFile.setImagePath(file.getPath());
					videoFile.setSpecialEffect("1");

					HomePageActivity.VideoFileList_Added.add(videoFile);
				}
			}

			// 如果是 取消全选，则 已清空 HomePageActivity.VideoFileList_Added

		}
		// 通知 adapter，刷新 界面

		adapter.notifyDataSetChanged();
	}

	/**
	 * 全选 按钮 点击 事件
	 */
	private OnClickListener btnSelectAllClick = new OnClickListener() {

		@Override
		public void onClick(View v) {

			if (btn_SelectAll.getText().toString().trim().equals("全选")||btn_SelectAll.getText().toString().trim().equals("SelectAll")) {

				SelectAllItem(true);

				btn_SelectAll.setText(R.string.text_cancelselectall);
			
		     	}
			   else{
				SelectAllItem(false);
				btn_SelectAll.setText(R.string.text_selectall);
			}
		//	selectAll Cancel SelectAll
		}

	};
	private FileAdapter adapter;
	private List<File> fileList;
	private ImageView Usbmount;
	/**
	 * 返回上一级
	 */
	public void backDir() {
		try {

			HomePageActivity.VideoFileList_Added.clear();

			if (!currentParent.getCanonicalPath().equals("/")) {

				// 获取上一级目录
				currentParent = currentParent.getParentFile();
				// 列出当前目录下的所有文件
				currentFiles = currentParent.listFiles();
				// 再次更新ListView
				inflateListView2(currentFiles);
			} else {

				finish();

				Intent intent = new Intent();
				intent.setClass(AddPlayList.this, PlayerActivity.class);
				startActivity(intent);

			}
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	private void MsgShow(String msg) {
		Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_SHORT).show();
	}

	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_add_play_list);
		setupView();
		mhandler = new MyHandler();
		usbstates = new UsbStatesReceiver(this);
		Usb = (TextView)findViewById(R.id.usbstates);
		Usbmount = (ImageView)findViewById(R.id.usbmounted);
		GetDirectory();
		AddListener();
		// 每次打开文件管理器，都清空 HomePageActivity.VideoFileList_Added，
		HomePageActivity.VideoFileList_Added.clear();

	}

	public void GetDirectory() {
		if (Usb_PATH == null) {
			Usb_PATH="/";
		}else {
		Usb_PATH = TraverseDictionary.GetUDiskDir();
		}
		File root = new File(Usb_PATH);
		if (root.exists()) {
			currentParent = root;
			currentFiles = root.listFiles();

			// 用currentFiles填充listview
			// inflateListView(currentFiles);

			inflateListView2(currentFiles);
		}
	}

	private void inflateListView2(File[] files) {

		fileList = Arrays.asList(files);

		adapter = new FileAdapter(fileList, AddPlayList.this);

		lv_add_list.setAdapter(adapter);

		// ===========

		// 隐藏 全选 按钮
		btn_SelectAll.setVisibility(btn_SelectAll.INVISIBLE);
		// 对 当前 文件 进行文件过滤，判断 文件 是否 是 视频文件 或 图片文件
		for (File file : files) {
			// 如果 是视频文件 或 图片文件 ，则 添加 到 内存 HomePageActivity.VideoFileList_Added
			if (MediaFileFilter.isVideoFile(file)
					|| MediaFileFilter.isImageFile(file)) {
				// 如果 其中一个文件 是 视频文件 或 图片文件 ，则显示 全选 按钮
				btn_SelectAll.setVisibility(btn_SelectAll.VISIBLE);
			}
		}
	}
	private void inflateListView(File[] files) {
		List<Map<String, Object>> listItems = new ArrayList<Map<String, Object>>();

		for (File file : files) {

			Map<String, Object> listItem = new HashMap<String, Object>();

			if (file.isDirectory()) {
				// 是路径文件夹
				listItem.put("icon", R.drawable.folder);
				listItem.put("fileName", file.getName());

			} else {

				// .AVI, .wma, .rmvb,.rm, .flash,.mp4,.mid, 3GP
				// 是文件
				if (MediaFileFilter.isVideoFile(file)) {
					// 是视频文件
					listItem.put("icon", R.drawable.file);
					listItem.put("isSelected", false);

				} else if (MediaFileFilter.isImageFile(file)) {
					// 是图片文件
					listItem.put("icon", R.drawable.photo);
					listItem.put("isSelected", false);

				} else {
					// 其他 文件
					listItem.put("icon", R.drawable.cd_rw_drive);
				}

				listItem.put("fileName", file.getName());

			}

			listItems.add(listItem);
		}

		SimpleAdapter adapter = new SimpleAdapter(AddPlayList.this, listItems,
				R.layout.add_play_list_item, new String[] { "icon", "fileName",
						"isSelected" }, new int[] { R.id.icon, R.id.name,
						id.checkBox_SelectedFile2 });

		lv_add_list.setAdapter(adapter);

		try {
			// tvpath.setText("当前路径为:" + currentParent.getAbsolutePath());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void AddListener() {

		btn_save_list.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {

				try {

					if (HomePageActivity.VideoFileList_Added.size() > 0) {
						XmlTool.addXmlByVideoFileList(XmlTool.getXmlFilePath(),
								HomePageActivity.VideoFileList_Added);
						MsgShow(getString(R.string.text_add_success));
					
						Intent intent = new Intent();
						intent.setClass(AddPlayList.this, PlayerActivity.class);
						startActivity(intent);
						finish();

					} else {
						MsgShow(getString(R.string.text_selectaddfile));
					}

				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		lv_add_list.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> adapterView, View view,
					int position, long id) {

				int i = position;

				// 如果用户单击了文件，直接返回，不做任何处理
				if (currentFiles[position].isFile()) {
					// 也可自定义扩展打开这个文件等
					File file = currentFiles[position];
                 //如果是视频和图片文件，就显示checckbox
					if (MediaFileFilter.isVideoFile(file)|| MediaFileFilter.isImageFile(file)){

						CheckBox checkBox = (CheckBox) view
								.findViewById(com.szaoto.ak10.R.id.checkBox_SelectedFile2);
                       //如果处于选中状态，就置为false,否则置为true
						if (checkBox.isChecked()) {
							checkBox.setChecked(false);
						} else {
							checkBox.setChecked(true);

						}
					} else {
						MsgShow(getString(R.string.text_play_select));
					}

					return;
				}
				// 获取用户点击的文件夹 下的所有文件
				File[] tem = currentFiles[position].listFiles();
				if (tem == null || tem.length == 0) {

					Toast.makeText(AddPlayList.this, R.string.text_path_nofiles,
							Toast.LENGTH_LONG).show();
				} else {
					// 获取用户单击的列表项对应的文件夹，设为当前的父文件夹
					currentParent = currentFiles[position];
					// 保存当前的父文件夹内的全部文件和文件夹
					currentFiles = tem;
					// 再次更新ListView
					inflateListView2(currentFiles);
				}
			}

		});

		btn_back_list.setOnClickListener(new OnClickListener() {

			public void onClick(View v) {

				backDir();
			}
		});

		btn_SelectAll.setOnClickListener(btnSelectAllClick);
	}
@Override
protected void onDestroy() {
	
	super.onDestroy();
}
	private void setupView() {
		btn_save_list = (Button) findViewById(R.id.btn_save_list);
		btn_SelectAll = (Button) findViewById(R.id.btn_SelectAll);

		lv_add_list = (ListView) findViewById(R.id.lv_add_list);
		// tvpath = (TextView) findViewById(R.id.tv_filepath_list);
		btn_back_list = (Button) findViewById(R.id.btn_back_list);
	}
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {

		if (keyCode == event.KEYCODE_BACK) {
			backDir();
		}

		return true;
	}
	@Override
	public int onChangedNotify(int xMsg, String xParam1, String xParam2) {
		 Usb_PATH=xParam2;
		return 0;
	}

	@Override
	public int onChangedNotifyKey(String xMsg, String xParam1, String xParam2) {
		// TODO Auto-generated method stub
		return 0;
	}
	@Override
	protected void onStart() {
		super.onStart();
		usbstates.registerReceiver();
	}
	@Override
	protected void onStop() {
		super.onStop();
		usbstates.unregisterReceiver();
	}
	public class MyHandler extends Handler{
		public MyHandler(){};
		
		@Override
		public void handleMessage(Message msg) {
			// TODO Auto-generated method stub
			super.handleMessage(msg);
			System.out.println("=============mainactivity handler");
//			Usb.setText("usb states");
			if(msg.arg1 == 0x00021)	{
				Usb.setText(R.string.text_usbmount);
				Usbmount.setVisibility(View.VISIBLE);
			   Usbmount.setBackgroundResource(R.drawable.usb_mounted);}
			else if(msg.arg1 == 0x00022){ 
				Usb.setText(R.string.text_usbunmount);
				Usbmount.setVisibility(View.VISIBLE);
				Usbmount.setBackgroundResource(R.drawable.usb_unmounted);}
				}
		}
	}
